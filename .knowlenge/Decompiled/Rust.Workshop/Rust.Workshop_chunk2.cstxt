using Facepunch.Extend;
using Rust.Platform.Steam;
using Rust.Workshop;
using Steamworks.Ugc;
using TMPro;
using UnityEngine;
using UnityEngine.UI;

public class WorkshopView : MonoBehaviour
{
	public TextMeshProUGUI Title;

	public TextMeshProUGUI AuthorName;

	public TextMeshProUGUI VoteInfo;

	public Button VoteUp;

	public Button VoteDown;

	private IWorkshopContent item;

	protected WorkshopInterface Interface => ((Component)this).GetComponentInParent<WorkshopInterface>();

	protected WorkshopItemEditor Editor => Interface.Editor;

	public void Update()
	{
		if (item != null && string.IsNullOrEmpty(((TMP_Text)AuthorName).text))
		{
			((TMP_Text)AuthorName).text = StringExtensions.Truncate(item.Owner.UserName, 32, (string)null).ToUpper();
		}
	}

	public void UpdateFrom(IWorkshopContent item)
	{
		this.item = item;
		if (this.item != null)
		{
			((TMP_Text)Title).text = StringExtensions.Truncate(item.Title, 24, (string)null).ToUpper();
			((TMP_Text)AuthorName).text = StringExtensions.Truncate(item.Owner.UserName, 32, (string)null).ToUpper();
		}
		else
		{
			((TMP_Text)Title).text = "FAILED TO LOAD SKIN";
			((TMP_Text)AuthorName).text = "";
		}
	}

	public void OnVoteUp()
	{
		//IL_0019: Unknown result type (might be due to invalid IL or missing references)
		//IL_001e: Unknown result type (might be due to invalid IL or missing references)
		if (item != null)
		{
			IWorkshopContent obj = item;
			SteamWorkshopContent val = (SteamWorkshopContent)(object)((obj is SteamWorkshopContent) ? obj : null);
			if (val != null)
			{
				Item value = val.Value;
				((Item)(ref value)).Vote(true);
			}
			UpdateFrom(item);
		}
	}

	public void OnVoteDown()
	{
		//IL_0019: Unknown result type (might be due to invalid IL or missing references)
		//IL_001e: Unknown result type (might be due to invalid IL or missing references)
		if (item != null)
		{
			IWorkshopContent obj = item;
			SteamWorkshopContent val = (SteamWorkshopContent)(object)((obj is SteamWorkshopContent) ? obj : null);
			if (val != null)
			{
				Item value = val.Value;
				((Item)(ref value)).Vote(false);
			}
			UpdateFrom(item);
		}
	}

	public void OpenWeb()
	{
		if (item != null)
		{
			IWorkshopContent obj = item;
			Application.OpenURL((obj != null) ? obj.Url : null);
		}
	}

	internal void Clear()
	{
		item = null;
		((TMP_Text)Title).text = "";
		((TMP_Text)AuthorName).text = "";
	}
}


using System.Collections;
using Facepunch.Utility;
using Rust.Workshop;
using Rust.Workshop.Import;
using UnityEngine;

internal class ImportVersion1 : SingletonComponent<ImportVersion1>
{
	internal IEnumerator DoImport(IWorkshopContent item, Skin skin)
	{
		WorkshopItemEditor.Loading(v1: true, "Downloading..", "", 0f);
		if (!item.IsInstalled)
		{
			item.Download();
			while (item.IsDownloading)
			{
				yield return null;
			}
			WorkshopItemEditor.Loading(v1: true, "Installing..", "", 0f);
			while (!item.IsInstalled)
			{
				yield return null;
			}
		}
		Os.OpenFolder(item.Directory);
		WorkshopItemEditor.Loading(v1: true, "Unable To Import", "", 0f);
		yield return (object)new WaitForSeconds(5f);
	}
}


using System;
using System.Collections;
using System.IO;
using Facepunch.Utility;
using Rust;
using Rust.Workshop;
using Rust.Workshop.Import;
using UnityEngine;

internal class ImportVersion2 : SingletonComponent<ImportVersion2>
{
	private AssetBundle Bundle;

	public void OnDisable()
	{
		if (!Application.isQuitting && (Object)(object)Bundle != (Object)null)
		{
			Bundle.Unload(true);
			Bundle = null;
			Debug.Log((object)"CLEANUP BUNDLE");
		}
	}

	internal IEnumerator DoImport(IWorkshopContent item, Skin skin)
	{
		if ((Object)(object)Bundle != (Object)null)
		{
			Bundle.Unload(true);
			Bundle = null;
		}
		WorkshopItemEditor.Loading(v1: true, "Downloading..", "", 0f);
		if (!item.IsInstalled)
		{
			item.Download();
			while (item.IsDownloading)
			{
				yield return null;
			}
			while (!item.IsInstalled)
			{
				yield return null;
			}
		}
		string text = item.Directory + "/bundle";
		if (File.Exists(text))
		{
			yield return ((MonoBehaviour)this).StartCoroutine(LoadItem(item.Directory, text, skin));
			yield break;
		}
		Debug.LogWarning((object)"No Bundle Found!");
		Os.OpenFolder(item.Directory);
		yield return (object)new WaitForSeconds(5f);
	}

	public IEnumerator LoadItem(string Folder, string BundleName, Skin skin)
	{
		AssetBundleCreateRequest request = AssetBundle.LoadFromFileAsync(BundleName);
		yield return (object)new WaitUntil((Func<bool>)(() => ((AsyncOperation)request).isDone));
		if ((Object)(object)request.assetBundle == (Object)null)
		{
			Debug.LogWarning((object)"Asset bundle is null!");
			yield break;
		}
		Bundle = request.assetBundle;
		WorkshopSkinBase asset = request.assetBundle.LoadAsset<WorkshopSkinBase>("Meta.asset");
		if ((Object)(object)asset == (Object)null)
		{
			string[] allAssetNames = request.assetBundle.GetAllAssetNames();
			foreach (string text in allAssetNames)
			{
				asset = request.assetBundle.LoadAsset<WorkshopSkinBase>(text);
				if ((Object)(object)asset != (Object)null)
				{
					break;
				}
			}
		}
		if ((Object)(object)asset == (Object)null)
		{
			Os.OpenFolder(Folder);
			yield return (object)new WaitForSeconds(5f);
			yield break;
		}
		yield return ((MonoBehaviour)this).StartCoroutine(ProcessMaterial(0, asset.skinMaterial0, skin));
		yield return ((MonoBehaviour)this).StartCoroutine(ProcessMaterial(1, asset.skinMaterial1, skin));
		yield return ((MonoBehaviour)this).StartCoroutine(ProcessMaterial(2, asset.skinMaterial2, skin));
		yield return ((MonoBehaviour)this).StartCoroutine(ProcessMaterial(3, asset.skinMaterial3, skin));
	}

	private IEnumerator ProcessMaterial(int v, Material inputMaterial, Skin skin)
	{
		if ((Object)(object)inputMaterial == (Object)null || skin.Materials.Length <= v)
		{
			yield break;
		}
		yield return null;
		ImportTexture("_MainTex", inputMaterial, skin.Materials[v], normal: false, skin, v);
		ImportTexture("_BumpMap", inputMaterial, skin.Materials[v], normal: true, skin, v);
		ImportTexture("_OcclusionMap", inputMaterial, skin.Materials[v], normal: false, skin, v);
		if ((Object)(object)ImportTexture("_SpecGlossMap", inputMaterial, skin.Materials[v], normal: false, skin, v) == (Object)null)
		{
			Texture2D val = ImportTexture("_MetallicGlossMap", inputMaterial, skin.Materials[v], normal: false, skin, v, "_SpecGlossMap");
			if ((Object)(object)val != (Object)null)
			{
				ConvertMetalToSpec(val, skin.Materials[v]);
			}
		}
	}

	private Texture2D ImportTexture(string name, Material inputMaterial, Material outputMaterial, bool normal, Skin skin, int group, string targetName = null)
	{
		if (targetName == null)
		{
			targetName = name;
		}
		Texture texture = outputMaterial.GetTexture(name);
		Texture texture2 = inputMaterial.GetTexture(name);
		if ((Object)(object)texture2 == (Object)null)
		{
			return null;
		}
		if ((Object)(object)texture == (Object)null || ((Object)texture2).name == ((Object)texture).name)
		{
			return null;
		}
		texture2 = (Texture)(object)Texture.LimitSize((Texture2D)(object)((texture2 is Texture2D) ? texture2 : null), skin.Skinnable.Groups[group].MaxTextureSize, skin.Skinnable.Groups[group].MaxTextureSize, normal);
		outputMaterial.SetTexture(targetName, texture2);
		return (Texture2D)(object)((texture2 is Texture2D) ? texture2 : null);
	}

	private Texture2D ConvertMetalToSpec(Texture2D tex, Material outputMaterial)
	{
		//IL_009f: Unknown result type (might be due to invalid IL or missing references)
		//IL_0016: Unknown result type (might be due to invalid IL or missing references)
		//IL_001b: Unknown result type (might be due to invalid IL or missing references)
		//IL_001c: Unknown result type (might be due to invalid IL or missing references)
		//IL_0037: Unknown result type (might be due to invalid IL or missing references)
		//IL_003d: Unknown result type (might be due to invalid IL or missing references)
		//IL_0043: Unknown result type (might be due to invalid IL or missing references)
		//IL_0049: Unknown result type (might be due to invalid IL or missing references)
		//IL_0057: Unknown result type (might be due to invalid IL or missing references)
		tex = Texture.CreateReadableCopy(tex, 0, 0, false);
		Color val = default(Color);
		for (int i = 0; i < ((Texture)tex).height; i++)
		{
			for (int j = 0; j < ((Texture)tex).width; j++)
			{
				Color pixel = tex.GetPixel(j, i);
				if (pixel.a == 0f)
				{
					pixel.a = 0.007843138f;
				}
				((Color)(ref val))..ctor(pixel.r, pixel.r, pixel.r, pixel.a);
				tex.SetPixel(j, i, val);
			}
		}
		tex.Apply();
		outputMaterial.SetTexture("_SpecGlossMap", (Texture)(object)tex);
		outputMaterial.SetFloat("_Glossiness", 1f);
		outputMaterial.SetColor("_SpecColor", Color.white);
		return tex;
	}
}


using System.Collections;
using Rust.Workshop;
using Rust.Workshop.Import;
using UnityEngine;

internal class ImportVersion3 : SingletonComponent<ImportVersion3>
{
	internal IEnumerator DoImport(IWorkshopContent item, Skin skin, bool compressTexturesOnLoad = true)
	{
		WorkshopItemEditor.Loading(v1: true, "Downloading..", "", 0f);
		yield return ((MonoBehaviour)this).StartCoroutine(DownloadFromWorkshop(item));
		if (!item.IsInstalled || item.Directory == null)
		{
			Debug.Log((object)"Error opening item, not downloaded properly.");
			Debug.Log((object)("item.Directory: " + item.Directory));
			Debug.Log((object)("item.Installed: " + item.IsInstalled));
		}
		else
		{
			WorkshopItemEditor.Loading(v1: true, "Loading..", "Reloading Textures", 0f);
			yield return ((MonoBehaviour)this).StartCoroutine(skin.LoadIcon(item.WorkshopId, item.Directory));
			yield return ((MonoBehaviour)this).StartCoroutine(skin.LoadAssets(item.WorkshopId, item.Directory, null, compressTexturesOnLoad));
		}
	}

	private IEnumerator DownloadFromWorkshop(IWorkshopContent item)
	{
		item.Download();
		while (item.IsDownloading)
		{
			yield return null;
		}
		while (!item.IsInstalled)
		{
			yield return null;
		}
	}
}


using System;
using UnityEngine;

[Serializable]
public class Group
{
	public string Name = "MAIN";

	public Material Material;

	public int MaxTextureSize = 1024;
}


public enum SkinType
{
	TShirt,
	Pants,
	SleepingBag,
	Hoodie,
	LongTShirt,
	Cap,
	Beenie,
	Boots,
	Jacket,
	Balaclava,
	Boonie,
	SnowJacket,
	Bandana,
	AK47,
	BoltRifle,
	Revolver,
	Rock,
	Hammer,
	PipeShotgun,
	PumpShotgun,
	SemiAutoPistol,
	Thompson,
	WoodStorage,
	BucketHat,
	BurlapGloves,
	BurlapPants,
	BurlapShirt
}


private struct MonoScriptData
{
	public byte[] FilePathsData;

	public byte[] TypesData;

	public int TotalTypes;

	public int TotalFiles;

	public bool IsEditorOnly;
}


using System;
using System.Collections.Generic;
using UnityEngine;

[JsonModel]
public class Manifest
{
	[JsonModel]
	public class Group
	{
		public Dictionary<string, string> Textures { get; set; } = new Dictionary<string, string>();

		public Dictionary<string, float> Floats { get; set; } = new Dictionary<string, float>();

		public Dictionary<string, ColorEntry> Colors { get; set; } = new Dictionary<string, ColorEntry>();
	}

	[JsonModel]
	public class ColorEntry
	{
		public float r { get; set; }

		public float g { get; set; }

		public float b { get; set; }

		public ColorEntry(Color c)
		{
			//IL_0007: Unknown result type (might be due to invalid IL or missing references)
			//IL_0013: Unknown result type (might be due to invalid IL or missing references)
			//IL_001f: Unknown result type (might be due to invalid IL or missing references)
			r = c.r;
			g = c.g;
			b = c.b;
		}
	}

	public int Version { get; set; }

	public string ItemType { get; set; }

	public ulong AuthorId { get; set; }

	public DateTime PublishDate { get; set; }

	public Group[] Groups { get; set; }
}


using System;
using Newtonsoft.Json;

public class Item
{
	public string name;

	public uint itemdefid;

	public string type;

	public string price_category;

	public string icon_url;

	public string icon_url_large;

	public bool marketable;

	public bool tradable;

	public bool commodity;

	public string market_hash_name;

	public string market_name;

	public string bundle;

	public string description;

	public string workshopid;

	public string itemshortname;

	public string tags;

	public string store_tags;

	public string store_images;

	public string exchange;

	public bool store_hidden;

	public string background_color;

	public string name_color;

	[NonSerialized]
	public DropChance dropChance;

	[NonSerialized]
	public Price priceCategory;

	public string workshopdownload;

	[JsonIgnore]
	public double Price => (double)priceCategory / 100.0;
}


public class PlaytimeDropItem : Item
{
	public int drop_interval;

	public bool use_drop_window;

	public int drop_window;

	public int drop_max_per_window;

	public bool use_drop_limit;

	public int drop_limit;
}


using System.Collections.Generic;

[JsonModel]
public class Group
{
	public Dictionary<string, string> Textures { get; set; } = new Dictionary<string, string>();

	public Dictionary<string, float> Floats { get; set; } = new Dictionary<string, float>();

	public Dictionary<string, ColorEntry> Colors { get; set; } = new Dictionary<string, ColorEntry>();
}


using UnityEngine;

[JsonModel]
public class ColorEntry
{
	public float r { get; set; }

	public float g { get; set; }

	public float b { get; set; }

	public ColorEntry(Color c)
	{
		//IL_0007: Unknown result type (might be due to invalid IL or missing references)
		//IL_0013: Unknown result type (might be due to invalid IL or missing references)
		//IL_001f: Unknown result type (might be due to invalid IL or missing references)
		r = c.r;
		g = c.g;
		b = c.b;
	}
}


